<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vignette on the Geocomputation with R website</title>
    <link>/categories/vignette/</link>
    <description>Recent content in vignette on the Geocomputation with R website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 08 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/vignette/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Inset maps with ggplot2</title>
      <link>/post/2019/ggplot2-inset-maps/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/ggplot2-inset-maps/</guid>
      <description>Inset maps enable multiple places to be shown in the same geographic data visualisation, as described in the Inset maps section (8.2.7) of our open source book Geocomputation with R. The topic of inset maps has gained attention and recently Enrico Spinielli asked inset maps could be created for data in unusual coordinate systems:
Speaking of insets, do you know of any ggplot2 examples with an inset for showing where the (bbox of the) map is in an orthographic/satellite proj?</description>
    </item>
    
    <item>
      <title>Map coloring: the color scale styles available in the tmap package</title>
      <link>/post/2019/tmap-color-scales/</link>
      <pubDate>Thu, 17 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/tmap-color-scales/</guid>
      <description>This vignette builds on the making maps chapter of the Geocomputation with R book. Its goal is to demonstrate all possible map styles available in the tmap package.
Prerequisites The examples below assume the following packages are attached:
library(spData) # example datasets library(tmap) # map creation library(sf) # spatial data reprojection The world object containing a world map data from Natural Earth and information about countries’ names, regions, and subregions they belong to, areas, life expectancies, and populations.</description>
    </item>
    
    <item>
      <title>Hillshade maps</title>
      <link>/post/2020/hillshade-maps/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/hillshade-maps/</guid>
      <description>This vignette builds on the making maps chapter of the Geocomputation with R book.
Prerequisites The example below assume the following packages are attached:
library(raster) # data download library(tmap) # map creation  Hillshade map Hillshade maps show the topographical shape of hills and mountains using levels of gray on a map. The role of this kind of maps is to display relative slopes, but not absolute height.
Calculate terrain characteristics Elevation data is needed to create a hillshade map.</description>
    </item>
    
    <item>
      <title>Grids and graticules in the tmap package</title>
      <link>/post/2019/tmap-grid/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/tmap-grid/</guid>
      <description>This vignette builds on the making maps chapter of the Geocomputation with R book. Its goal is to demonstrate how to set and modify grids and graticules in the tmap package.
Prerequisites The examples below assume the following packages are attached:
library(spData) # example datasets library(tmap) # map creation (&amp;gt;=2.3) library(sf) # spatial data classes  Grids and graticules The tmap package offers two ways to draws coordinate lines - tm_grid() and tm_graticules().</description>
    </item>
    
    <item>
      <title>Geographic projections and transformations</title>
      <link>/post/2019/crs-projections-transformations/</link>
      <pubDate>Wed, 21 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/crs-projections-transformations/</guid>
      <description>Introduction This workbook outlines key concepts and functions related to map projections — also referred to as coordinate reference systems (CRSs) — and transformation of geographic data from one projection to another. It is based on the open source book Geocomputation with R, and Chapter 6 in particular.
It was developed for the ‘CASA Summer School’, or the Doctoral Summer School for Advanced Spatial Modelling: Skills Workshop and Hackathon, 21st to 23rd August 2019, for its full name!</description>
    </item>
    
    <item>
      <title>Casting Geometries: Extended</title>
      <link>/post/2020/casting-geometries-extended/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/casting-geometries-extended/</guid>
      <description>This vignette provides some further detail on the Type transformations section (see https://geocompr.robinlovelace.net/geometric-operations.html#type-trans ) of the Geocomputation with R book.
Attach libraries This vignette requires the following packages to be installed and attached:
library(sf) library(purrr) library(tibble) library(dplyr) library(tidyr)  Create a set of sfg objects The code below creates a set of simple feature geometries (sfg) objects that are used as examples:
 pts_sfg - POINT mpts_sfg - MULTIPOINT line_sfg - LINESTRING mline_sfg - MULTILINESTRING poly_sfg - POLYGON mpoly_sfg - MULTIPOLYGON geoc_sfg - GEOMETRYCOLLECTION  Additionally, the sfgs object - a list containing all of the above objects is created.</description>
    </item>
    
    <item>
      <title>Geocomputation benchmarks</title>
      <link>/post/2020/geocompr-benchmarks/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/geocompr-benchmarks/</guid>
      <description>Datasets used The following filepaths datasets will be used:
f1 = system.file(&amp;quot;shapes/world.gpkg&amp;quot;, package = &amp;quot;spData&amp;quot;) f2 = &amp;quot;promenade-all.geojson&amp;quot; To run, this article relies on downloading files onto your computer:
suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(data.table)) suppressPackageStartupMessages(library(sf)) f2 = &amp;quot;promenade-all.geojson&amp;quot; u = &amp;quot;https://github.com/spnethack/spnethack/releases/download/0.1/promenade-all.geojson&amp;quot; if(!file.exists(f2)) download.file(u, destfile = f2) system.time({b = read_sf(f2)}) system.time({d = b %&amp;gt;% data.table::as.data.table()}) system.time(d[,geometry:=sf::st_as_text(geometry),]) system.time(d %&amp;gt;% readr::write_tsv(&amp;quot;tmp.tsv&amp;quot;))  Reading vector data library(sf) vector_filepath = system.file(&amp;quot;shapes/world.gpkg&amp;quot;, package = &amp;quot;spData&amp;quot;) world = st_read(vector_filepath) To demonstrate this, we will use a function to compare st_read() with its sp equivalent, rgdal::readOGR():</description>
    </item>
    
    <item>
      <title>Geocomputation for sea level research</title>
      <link>/post/2020/sea-level-rise/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/sea-level-rise/</guid>
      <description>Introduction Sea level rise (SLR) is a global phenemona whose impacts vary geographically. Although the sea rises everywhere (although at different rates), only certain, low-lying locations will be affected. Sea level research involves analysing large geographic datasets and statistical models of change, making the computational approach advocated in Geocomputation with R well-suited to its study.
The main factors determining the spatial distribution include elevation, proximity to the sea and population density: large, low-lying coastal settlements house the highest numbers of people at risk.</description>
    </item>
    
    <item>
      <title>Loading and analyzing GPS tracks with R</title>
      <link>/post/2020/gps-tracks/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/gps-tracks/</guid>
      <description>Introduction Perhaps the most ubiquitous type of geographic information is the continuous stream of data produced by GPS devices. Global Positioning System (GPS) devices are now in everything from watches to cars and, of course, smartphones. This means that GPS datasets have the ability to track a large proportion of the world’s population. Although there are privacy concerns, when appropriately anonymized and aggregated, GPS datasets have the potential to help tackle the issues raised in the Transportation chapter of the Geocomputation with R book: to design healthy transport systems in which walking and cycling overtake cars as the main travel modes.</description>
    </item>
    
    <item>
      <title>Spatial Subsetting: Extended</title>
      <link>/post/2020/spatial-subsetting-extended/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/spatial-subsetting-extended/</guid>
      <description>This vignette provides some further detail on the vector attribute subsetting section (see https://geocompr.robinlovelace.net/attr.html#vector-attribute-subsetting ) and the spatial subsetting section (see https://geocompr.robinlovelace.net/spatial-operations.html#spatial-subsetting ) of the Geocomputation with R book. Its goal is to demonstrate some subtleties of spatial subsetting of sf objects using base R and tidyverse methods.
The starting point is to attach necessary packages:
knitr::opts_chunk$set(eval = FALSE) # failing currently (2020-03) so not running (RL) # Error: # Quitting from lines 205-218 (spatial-subsetting-extended.</description>
    </item>
    
  </channel>
</rss>