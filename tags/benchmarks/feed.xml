<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>benchmarks on the Geocomputation with R website</title>
    <link>/tags/benchmarks/</link>
    <description>Recent content in benchmarks on the Geocomputation with R website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 21 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/benchmarks/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Demo of reproducible geographic data analysis: mapping Covid-19 data with R</title>
      <link>/post/2020/mapping-covid-19/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/mapping-covid-19/</guid>
      <description>library(sf) ## Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 7.0.0 library(tmap) library(dplyr) To get data on official Covid-19 statistics, we will use the COVID19 R package.
This package provides daily updated data on a variety of variables related to the coronavirus pandemic at national, regional and city levels. Install it as follows:
install.packages(&amp;quot;COVID19&amp;quot;) To minimise dependencies for reproducing the results in this article, we accessed and uploaded a copy of the data with the following commands:</description>
    </item>
    
    <item>
      <title>Geocomputation benchmarks</title>
      <link>/post/2020/geocompr-benchmarks/</link>
      <pubDate>Wed, 07 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/geocompr-benchmarks/</guid>
      <description>Datasets used The following filepaths datasets will be used:
f1 = system.file(&amp;quot;shapes/world.gpkg&amp;quot;, package = &amp;quot;spData&amp;quot;) f2 = &amp;quot;promenade-all.geojson&amp;quot; To run, this article relies on downloading files onto your computer:
suppressPackageStartupMessages(library(dplyr)) suppressPackageStartupMessages(library(data.table)) suppressPackageStartupMessages(library(sf)) f2 = &amp;quot;promenade-all.geojson&amp;quot; u = &amp;quot;https://github.com/spnethack/spnethack/releases/download/0.1/promenade-all.geojson&amp;quot; if(!file.exists(f2)) download.file(u, destfile = f2) system.time({b = read_sf(f2)}) system.time({d = b %&amp;gt;% data.table::as.data.table()}) system.time(d[,geometry:=sf::st_as_text(geometry),]) system.time(d %&amp;gt;% readr::write_tsv(&amp;quot;tmp.tsv&amp;quot;))  Reading vector data library(sf) vector_filepath = system.file(&amp;quot;shapes/world.gpkg&amp;quot;, package = &amp;quot;spData&amp;quot;) world = st_read(vector_filepath) To demonstrate this, we will use a function to compare st_read() with its sp equivalent, rgdal::readOGR():</description>
    </item>
    
  </channel>
</rss>